// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  companies     CompanyUser[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Company {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?       @db.Text
  logo        String?
  website     String?
  address     String?
  phone       String?
  email       String?
  status      CompanyStatus @default(ACTIVE)
  users       CompanyUser[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  @@map("companies")
}

model CompanyUser {
  id         String     @id @default(cuid())
  userId     String
  companyId  String
  role       UserRole   @default(MEMBER)
  status     UserStatus @default(ACTIVE)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  company    Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
  @@map("company_users")
}
